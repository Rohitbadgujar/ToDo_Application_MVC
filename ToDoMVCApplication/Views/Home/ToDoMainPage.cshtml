
@model List<ToDoMVCApplication.Models.Task>

<html lang="en">
<body>
    <div class="container">
        <!-- Trigger the modal with a button -->
        <button type="button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#myModal">Add New Task</button>
        <p style="float:right;    padding-right: 71px;">
            <a href="#" id="logoutBtnCLick" class="btn btn-info btn-lg">
                <span class="glyphicon glyphicon-log-out"></span> Log out
            </a>
        </p>
        <!-- Modal -->
        <div class="modal fade" id="myModal" role="dialog">
            <div class="modal-dialog">

                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" style="float:left">Add New Task</h4>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="form-group">
                                <label for="new-task">Task Name</label>
                                <textarea class="form-control" rows="1" type="text" id="new-task"></textarea> <br>
                                <label for="comment">Task Decription:</label>
                                <textarea class="form-control" rows="5" id="task-description"></textarea>
                            </div>

                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Save and Close</button>
                    </div>
                </div>

            </div>
        </div>

    </div>
    <section class="container">

        <div class="todo-list box" style="height:536px;width:95%">
            <div class="button-header" style="width:100%;height:13%">
                <button type="button" id="completedTask" style="background-color: limegreen !important;color: black;" class="btn btn-outline-primary">Complete Task</button>
                <button type="button" id="importantTask" style="background-color: chocolate !important;color: black;" class="btn btn-outline-secondary">Important</button>
                <button type="button" id="deleteTask" style="background-color: red !important;color: black;" class="btn btn-outline-success">Delete</button>
                <label id="errorMessage" style="display:none;color: red !important;">Please select Task to update</label>
                <p style="float:right;padding-right:20px">
                    <a href="#" class="btn btn-info btn-lg">
                        <span class="glyphicon glyphicon-edit"></span> Edit
                    </a>
                </p>
                <h2>Incomplete Tasks</h2>
            </div>
            <div class="list-group">
                <ul>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                        var importantTask = "";
                        var style = "";
                        var impInd = "false";
                        if (Model[i].DeleteInd != true)
                        {
                            if (Model[i].ImportantInd == true)
                            {
                                impInd = "true";
                                importantTask = "<span style='float:right;color:orangered' class='badge'>Important</span>";
                            }
                            if (Model[i].CompletedInd == true)
                            {
                                style = "text-decoration: line-through";
                            }
                            <li>
                                <a href="#" id="TaskList" style="background-color:steelblue; !important;height:110px" class="list-group-item">
                                    <h5 class="list-group-item-heading" style="color:burlywood ;"><input value="@Model[i].TaskId" name="taskchk" type="checkbox"><label style="@Html.Raw(style)">@Model[i].TaskName</label> @Html.Raw(@importantTask)</h5>
                                    <h6 class="list-group-item-text"><label style="@Html.Raw(style)">@Model[i].TaskDescription</label></h6>
                                    <label style="float:right">Last Modified on @Model[i].CreateDateTime</label>
                                    <input type="hidden" value="@Model[i].TaskName" id="hdnTaskName_@Model[i].TaskId">
                                    <input type="hidden" value="@Model[i].TaskDescription" id="hdnTaskDescription_@Model[i].TaskId">
                                    <input type="hidden" value="@Model[i].CreateDateTime" id="hdnCreateDatetime_@Model[i].TaskId">
                                    <input type="hidden" value="@Model[i].ModifiedDateTime" id="hdnModifiedDatetime_@Model[i].TaskId">
                                    <input type="hidden" value="@Model[i].DeleteInd.ToString()" id="hdnDeleteInd_@Model[i].TaskId">
                                    <input type="hidden" value="@Model[i].CompletedInd.ToString()" id="hdnCompleteInd_@Model[i].TaskId">
                                    <input type="hidden" value="@impInd.ToString()" id="hdnImportantInd_@Model[i].TaskId">
                                </a>
                            </li>
                        }
                    }

                </ul>
            </div>
        </div>


    </section><!--/container-->

</body>
</html>
<style>
    * {
        box-sizing: border-box;
    }

    .container {
        background: #e9ecef !important;
        width: 100%;
        max-width: 100% !important;
        background: #333;
        padding: 5px;
        overflow: hidden;
        border-radius: 10px;
        font-family: sans-serif;
    }

    h1, h2 {
        margin: 0;
        text-align: center;
        text-transform: uppercase;
    }

    h2 {
        font-size: 20px;
        text-align: center;
        border-bottom: 1px solid #b1c9bb;
        padding: 0 0 10px;
        color: #57635c;
    }

    .new-task-container {
        text-align: center;
    }

    .box {
        padding: 10px 15px;
        border: 2px solid #b1c9bb;
        border-radius: 5px;
        margin: 15px 0;
    }


    .todo-list {
        float: left;
        width: 46%;
    }

    .complete-list {
        float: right;
        width: 46%;
    }

    ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    li {
        padding: 10px;
        border-bottom: 1px dotted #CCC;
    }

    .delete {
        float: right;
    }
</style>

<script>
    var newTask = document.querySelector('#new-task');

var taskdescription = document.querySelector('#task-description');
    var addTaskBtn = document.querySelector('#addTask');

    $("#logoutBtnCLick").click(function () {
        debugger;
        $.ajax({
            type: 'post',
            url: '@Url.Action("MainPage")',
            contentType: 'application/json; charset=utf-8',
            success: function (result) {
               $("#main-view-container").html(result);
            }
        });

    })
    $('#myModal').on('hidden.bs.modal', function () {
        if (newTask.value == "") {
            alert('Empty Task Cannot be Created!');
            return false;
        }
        addUpdateTask(789,true,editMode);
})

    $("#completedTask").click(function () {
        debugger;

          var taskIds = [];
        $.each($("input[name='taskchk']:checked"), function () {

            if ( $("#hdnCompleteInd_" + $(this).val()).val() == "true") {
                 $("#hdnCompleteInd_" + $(this).val()).val(false);
             }
             else
                 $("#hdnCompleteInd_" + $(this).val()).val(true);
                taskIds.push($(this).val());
                addUpdateTask($(this).val());

            });
        if (taskIds.length < 1) {
            $("#errorMessage").show();
          setTimeout(function () { $("#errorMessage").hide(); }, 3000)
        }

    });
     $("#deleteTask").click(function () {
          var taskIds = [];

         $.each($("input[name='taskchk']:checked"), function () {
             if ($("#hdnDeleteInd_" + $(this).val()).val() == "true") {
                $("#hdnDeleteInd_" + $(this).val()).val(false)
             }
             else
                 $("#hdnDeleteInd_" + $(this).val()).val(true)
                taskIds.push($(this).val());
                addUpdateTask($(this).val());

            });
           if (taskIds.length < 1) {
            $("#errorMessage").show();
          setTimeout(function () { $("#errorMessage").hide(); }, 3000)
        }

     });
     $("#importantTask").click(function () {
          var taskIds = [];
         $.each($("input[name='taskchk']:checked"), function () {
             if ($("#hdnImportantInd_" + $(this).val()).val() == "true") {
                 $("#hdnImportantInd_" + $(this).val()).val(false);
             }
             else
                 $("#hdnImportantInd_" + $(this).val()).val(true);
                taskIds.push($(this).val());
                addUpdateTask($(this).val());
            });
         if (taskIds.length < 1) {
             $("#errorMessage").show();
             setTimeout(function () { $("#errorMessage").hide(); }, 3000)
         }
    });
//ADD THE NEW TASK INTO ACTUAL INCOMPLETE LIST
    var addUpdateTask = function (taskId, newTask = false, editMode = false) {
  
        debugger;
        var data = {
            'TaskId': taskId,
            'TaskName': newTask == false ? $("#hdnTaskName_" + taskId).val() : $("#new-task").val(),
            'TaskDescription': newTask == false ? $("#hdnTaskDescription_" + taskId).val() : $("#task-description").val(),
            'DeleteInd': newTask == false ? $("#hdnDeleteInd_" + taskId).val() : false,
            'ImportantInd': newTask == false ? $("#hdnImportantInd_" + taskId).val() : false,
            'completedInd': newTask == false ?$("#hdnCompleteInd_" + taskId).val() : false,
        }

        $("#myModal").modal('hide');
        $.ajax({
            type: 'post',
            url: '@Url.Action("AddUpdateTask")',
            data: JSON.stringify(data),
            contentType: 'application/json; charset=utf-8',
            success: function (result) {
                $("#main-container-login").html(result);
            }
        });

  newTask.value="";
  //BIND THE NEW LIST ITEM TO THE INCOMPLETE LIST
  //bindIncompleteItems(listItem, completeTask);

    };

</script>